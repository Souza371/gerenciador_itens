<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gerenciador de Itens - Sistema Completo</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #2e8b57 0%, #228b22 50%, #006400 100%);
            min-height: 100vh;
            padding: 20px;
            color: #333;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.98);
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #32cd32 0%, #228b22 50%, #006400 100%);
            color: white;
            padding: 40px;
            text-align: center;
            position: relative;
            overflow: hidden;
        }

        .header::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: repeating-linear-gradient(
                45deg,
                transparent,
                transparent 10px,
                rgba(255, 255, 255, 0.05) 10px,
                rgba(255, 255, 255, 0.05) 20px
            );
            animation: slide 20s linear infinite;
        }

        @keyframes slide {
            0% { transform: translate(-50%, -50%) rotate(0deg); }
            100% { transform: translate(-50%, -50%) rotate(360deg); }
        }

        .header h1 {
            font-size: 3rem;
            margin-bottom: 15px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
            position: relative;
            z-index: 1;
        }

        .header p {
            font-size: 1.2rem;
            opacity: 0.9;
            position: relative;
            z-index: 1;
        }

        .main-content {
            padding: 40px;
        }

        .status-connection {
            text-align: center;
            padding: 15px;
            margin-bottom: 20px;
            border-radius: 10px;
            font-weight: bold;
        }

        .status-connection.connected {
            background: linear-gradient(135deg, #d4f0d4 0%, #e8f5e8 100%);
            color: #006400;
            border: 2px solid #32cd32;
        }

        .status-connection.disconnected {
            background: linear-gradient(135deg, #ffe4e1 0%, #ffb3ba 100%);
            color: #8b0000;
            border: 2px solid #dc3545;
        }

        .form-section {
            background: linear-gradient(135deg, #f0fff0 0%, #e8f5e8 100%);
            padding: 30px;
            border-radius: 15px;
            margin-bottom: 30px;
            border: 2px solid #90ee90;
            box-shadow: 0 8px 20px rgba(50, 205, 50, 0.1);
        }

        .form-section h2 {
            color: #006400;
            margin-bottom: 25px;
            font-size: 1.8rem;
            text-align: center;
        }

        .form-group {
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
            color: #2e8b57;
        }

        input, select, textarea {
            width: 100%;
            padding: 15px;
            border: 2px solid #90ee90;
            border-radius: 10px;
            font-size: 1rem;
            transition: all 0.3s ease;
            background: rgba(255, 255, 255, 0.9);
        }

        input:focus, select:focus, textarea:focus {
            outline: none;
            border-color: #32cd32;
            box-shadow: 0 0 0 4px rgba(50, 205, 50, 0.2);
            background: white;
            transform: translateY(-2px);
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 20px;
        }

        .btn {
            padding: 15px 30px;
            border: none;
            border-radius: 10px;
            font-size: 1rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-right: 10px;
            margin-bottom: 10px;
            text-transform: uppercase;
            letter-spacing: 1px;
            position: relative;
            overflow: hidden;
        }

        .btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
            transition: left 0.5s;
        }

        .btn:hover::before {
            left: 100%;
        }

        .btn-primary {
            background: linear-gradient(135deg, #32cd32 0%, #228b22 100%);
            color: white;
            box-shadow: 0 4px 15px rgba(50, 205, 50, 0.4);
        }

        .btn-success {
            background: linear-gradient(135deg, #00ff7f 0%, #32cd32 100%);
            color: #006400;
            box-shadow: 0 4px 15px rgba(0, 255, 127, 0.4);
        }

        .btn-danger {
            background: linear-gradient(135deg, #ff6b6b 0%, #dc3545 100%);
            color: white;
            box-shadow: 0 4px 15px rgba(255, 107, 107, 0.4);
        }

        .btn-warning {
            background: linear-gradient(135deg, #ffd700 0%, #ff8c00 100%);
            color: #8b4513;
            box-shadow: 0 4px 15px rgba(255, 215, 0, 0.4);
        }

        .btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
        }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 25px;
            margin-bottom: 40px;
        }

        .stat-card {
            background: linear-gradient(135deg, white 0%, #f0fff0 100%);
            padding: 30px;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 10px 30px rgba(50, 205, 50, 0.15);
            border: 2px solid #90ee90;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 4px;
            background: linear-gradient(90deg, #32cd32, #228b22, #006400);
        }

        .stat-card:hover {
            transform: translateY(-5px) scale(1.02);
            box-shadow: 0 15px 40px rgba(50, 205, 50, 0.25);
        }

        .stat-number {
            font-size: 2.5rem;
            font-weight: bold;
            margin-bottom: 10px;
            color: #006400;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.1);
        }

        .stat-label {
            color: #2e8b57;
            font-weight: bold;
            font-size: 1.1rem;
        }

        .filters {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 25px;
            padding: 25px;
            background: linear-gradient(135deg, #f0fff0 0%, #e8f5e8 100%);
            border-radius: 15px;
            border: 2px solid #90ee90;
        }

        .items-container {
            background: linear-gradient(135deg, #f8fff8 0%, #f0fff0 100%);
            padding: 30px;
            border-radius: 15px;
            border: 2px solid #90ee90;
        }

        .items-container h2 {
            color: #006400;
            margin-bottom: 25px;
            text-align: center;
            font-size: 1.8rem;
        }

        .items-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 20px;
        }

        .item-card {
            background: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 8px 25px rgba(50, 205, 50, 0.1);
            border-left: 5px solid #32cd32;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .item-card::before {
            content: '';
            position: absolute;
            top: 0;
            right: 0;
            width: 50px;
            height: 50px;
            background: rgba(50, 205, 50, 0.1);
            border-radius: 0 0 0 50px;
        }

        .item-card:hover {
            transform: translateY(-5px) scale(1.02);
            box-shadow: 0 15px 40px rgba(50, 205, 50, 0.2);
            border-left-width: 8px;
        }

        .item-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 15px;
        }

        .item-name {
            font-size: 1.4rem;
            font-weight: bold;
            color: #006400;
            flex: 1;
            margin-right: 15px;
        }

        .item-id {
            background: #e8f5e8;
            color: #2e8b57;
            padding: 5px 10px;
            border-radius: 15px;
            font-size: 0.8rem;
            font-weight: bold;
        }

        .item-info {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin: 20px 0;
        }

        .item-detail {
            text-align: center;
            padding: 15px;
            background: #f8fff8;
            border-radius: 10px;
            border: 1px solid #90ee90;
        }

        .item-detail label {
            font-size: 0.9rem;
            color: #2e8b57;
            margin-bottom: 8px;
            font-weight: normal;
        }

        .item-detail span {
            font-weight: bold;
            color: #006400;
            font-size: 1.1rem;
        }

        .tipo-badge {
            display: inline-block;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 0.9rem;
            font-weight: bold;
            color: white;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.2);
            margin-bottom: 15px;
        }

        .item-actions {
            display: flex;
            gap: 10px;
            justify-content: center;
            margin-top: 20px;
        }

        .item-actions .btn {
            padding: 10px 20px;
            font-size: 0.9rem;
            margin: 0;
            flex: 1;
        }

        .loading {
            text-align: center;
            padding: 50px;
            color: #2e8b57;
        }

        .loading::after {
            content: '';
            display: inline-block;
            width: 30px;
            height: 30px;
            border: 3px solid #90ee90;
            border-radius: 50%;
            border-top-color: #32cd32;
            animation: spin 1s ease-in-out infinite;
            margin-left: 10px;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        .empty-state {
            text-align: center;
            padding: 60px;
            color: #2e8b57;
        }

        .empty-state h3 {
            font-size: 1.8rem;
            margin-bottom: 15px;
            color: #006400;
        }

        .empty-state p {
            font-size: 1.1rem;
            margin-bottom: 20px;
        }

        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 25px;
            border-radius: 10px;
            color: white;
            font-weight: bold;
            z-index: 1001;
            transform: translateX(400px);
            transition: transform 0.3s ease;
            max-width: 300px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }

        .notification.show {
            transform: translateX(0);
        }

        .notification.success {
            background: linear-gradient(135deg, #32cd32 0%, #228b22 100%);
        }

        .notification.error {
            background: linear-gradient(135deg, #ff6b6b 0%, #dc3545 100%);
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.6);
            backdrop-filter: blur(5px);
        }

        .modal-content {
            background: linear-gradient(135deg, white 0%, #f0fff0 100%);
            margin: 10% auto;
            padding: 40px;
            border-radius: 20px;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 25px 60px rgba(0, 0, 0, 0.3);
            border: 2px solid #90ee90;
            animation: modalSlide 0.3s ease-out;
        }

        @keyframes modalSlide {
            from {
                opacity: 0;
                transform: translateY(-50px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .close {
            color: #2e8b57;
            float: right;
            font-size: 32px;
            font-weight: bold;
            cursor: pointer;
            transition: color 0.3s ease;
        }

        .close:hover {
            color: #006400;
        }

        .api-status {
            position: fixed;
            bottom: 20px;
            left: 20px;
            padding: 10px 20px;
            border-radius: 25px;
            font-size: 0.9rem;
            font-weight: bold;
            z-index: 1000;
        }

        .api-status.online {
            background: #32cd32;
            color: white;
        }

        .api-status.offline {
            background: #dc3545;
            color: white;
        }

        @media (max-width: 768px) {
            .form-row {
                grid-template-columns: 1fr;
            }
            
            .header h1 {
                font-size: 2.2rem;
            }
            
            .main-content {
                padding: 20px;
            }

            .items-grid {
                grid-template-columns: 1fr;
            }

            .item-info {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header class="header">
            <h1>🌿 Gerenciador de Itens</h1>
            <p>Sistema CRUD Completo com Backend PHP + MySQL</p>
        </header>

        <main class="main-content">
            <!-- Status da Conexão -->
            <div id="statusConnection" class="status-connection disconnected">
                🔌 Verificando conexão com o servidor...
            </div>

            <!-- Estatísticas -->
            <section class="stats-grid">
                <div class="stat-card">
                    <div class="stat-number" id="totalItens">0</div>
                    <div class="stat-label">📦 Total de Itens</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="totalTipos">0</div>
                    <div class="stat-label">🏷️ Tipos Diferentes</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="quantidadeTotal">0</div>
                    <div class="stat-label">📊 Quantidade Total</div>
                </div>
            </section>

            <!-- Formulário de Cadastro -->
            <section class="form-section">
                <h2 id="formTitle">🌱 Cadastrar Novo Item</h2>
                <form id="itemForm">
                    <input type="hidden" id="itemId" name="id">
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="nome">📝 Nome do Item *</label>
                            <input type="text" id="nome" name="nome" required 
                                   placeholder="Digite o nome do item" maxlength="100">
                        </div>
                        <div class="form-group">
                            <label for="tipo">🏷️ Tipo *</label>
                            <select id="tipo" name="tipo" required>
                                <option value="">Selecione um tipo</option>
                                <option value="Eletrônicos">📱 Eletrônicos</option>
                                <option value="Roupas">👕 Roupas</option>
                                <option value="Livros">📚 Livros</option>
                                <option value="Casa">🏠 Casa</option>
                                <option value="Esportes">⚽ Esportes</option>
                                <option value="Alimentação">🍎 Alimentação</option>
                                <option value="Ferramentas">🔧 Ferramentas</option>
                                <option value="Outros">📦 Outros</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="quantidade">🔢 Quantidade *</label>
                            <input type="number" id="quantidade" name="quantidade" 
                                   min="1" max="9999" required placeholder="0">
                        </div>
                    </div>
                    
                    <div style="text-align: center; margin-top: 30px;">
                        <button type="submit" class="btn btn-primary" id="btnSubmit">
                            ✅ Cadastrar Item
                        </button>
                        <button type="button" class="btn btn-warning" id="btnCancelar" style="display: none;">
                            ❌ Cancelar Edição
                        </button>
                        <button type="button" class="btn btn-success" onclick="limparFormulario()">
                            🔄 Limpar Campos
                        </button>
                    </div>
                </form>
            </section>

            <!-- Filtros -->
            <section class="filters">
                <div class="form-group">
                    <label for="filtroNome">🔍 Buscar por nome:</label>
                    <input type="text" id="filtroNome" placeholder="Digite para buscar...">
                </div>
                <div class="form-group">
                    <label for="filtroTipo">🏷️ Filtrar por tipo:</label>
                    <select id="filtroTipo">
                        <option value="">Todos os tipos</option>
                        <option value="Eletrônicos">📱 Eletrônicos</option>
                        <option value="Roupas">👕 Roupas</option>
                        <option value="Livros">📚 Livros</option>
                        <option value="Casa">🏠 Casa</option>
                        <option value="Esportes">⚽ Esportes</option>
                        <option value="Alimentação">🍎 Alimentação</option>
                        <option value="Ferramentas">🔧 Ferramentas</option>
                        <option value="Outros">📦 Outros</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="ordenacao">📊 Ordenar por:</label>
                    <select id="ordenacao">
                        <option value="id">ID (Mais recente)</option>
                        <option value="nome">Nome (A-Z)</option>
                        <option value="tipo">Tipo</option>
                        <option value="quantidade">Quantidade (Maior)</option>
                        <option value="quantidade_asc">Quantidade (Menor)</option>
                    </select>
                </div>
            </section>

            <!-- Ações Gerais -->
            <section style="text-align: center; margin-bottom: 30px;">
                <button class="btn btn-primary" onclick="carregarItens()">
                    🔄 Recarregar Lista
                </button>
                <button class="btn btn-success" onclick="exportarDados()">
                    💾 Exportar JSON
                </button>
                <button class="btn btn-danger" onclick="confirmarLimparTodos()">
                    🗑️ Limpar Todos os Itens
                </button>
            </section>

            <!-- Lista de Itens -->
            <section class="items-container">
                <h2>📋 Lista de Itens Cadastrados</h2>
                <div id="listaItens">
                    <div class="loading">
                        🔄 Carregando itens do servidor...
                    </div>
                </div>
            </section>
        </main>
    </div>

    <!-- Status da API -->
    <div id="apiStatus" class="api-status offline">
        📡 API Offline
    </div>

    <!-- Modal de Confirmação -->
    <div id="modalConfirmacao" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h3 id="modalTitulo">⚠️ Confirmar Ação</h3>
            <p id="modalMensagem">Você tem certeza que deseja realizar esta ação?</p>
            <div style="text-align: right; margin-top: 30px;">
                <button class="btn btn-danger" id="btnConfirmar">✅ Confirmar</button>
                <button class="btn btn-warning" id="btnCancelarModal">❌ Cancelar</button>
            </div>
        </div>
    </div>

    <script>
        // Configuração da API
        const API_URL = 'api.php'; // Arquivo PHP que será criado

        // Classe principal do sistema
        class GerenciadorItens {
            constructor() {
                this.itens = [];
                this.itemEditando = null;
                this.inicializar();
            }

            async inicializar() {
                this.configurarEventos();
                await this.verificarConexao();
                await this.carregarItens();
                this.atualizarEstatisticas();
            }

            configurarEventos() {
                // Formulário
                document.getElementById('itemForm').addEventListener('submit', (e) => {
                    e.preventDefault();
                    this.salvarItem();
                });

                // Filtros
                document.getElementById('filtroNome').addEventListener('input', () => this.filtrarItens());
                document.getElementById('filtroTipo').addEventListener('change', () => this.filtrarItens());
                document.getElementById('ordenacao').addEventListener('change', () => this.filtrarItens());

                // Botões
                document.getElementById('btnCancelar').addEventListener('click', () => this.cancelarEdicao());

                // Modal
                document.querySelector('.close').addEventListener('click', () => this.fecharModal());
                document.getElementById('btnCancelarModal').addEventListener('click', () => this.fecharModal());
                
                // Validação em tempo real
                document.getElementById('nome').addEventListener('input', this.validarNomeInput);
                document.getElementById('quantidade').addEventListener('input', this.validarQuantidadeInput);

                // Verificar conexão periodicamente
                setInterval(() => this.verificarConexao(), 30000); // A cada 30 segundos
            }

            async verificarConexao() {
                try {
                    const response = await fetch(`${API_URL}?action=ping`, {
                        method: 'GET',
                        headers: { 'Content-Type': 'application/json' }
                    });

                    const statusElement = document.getElementById('statusConnection');
                    const apiStatusElement = document.getElementById('apiStatus');

                    if (response.ok) {
                        statusElement.className = 'status-connection connected';
                        statusElement.innerHTML = '✅ Conectado ao servidor MySQL';
                        apiStatusElement.className = 'api-status online';
                        apiStatusElement.innerHTML = '📡 API Online';
                    } else {
                        throw new Error('Servidor indisponível');
                    }
                } catch (error) {
                    const statusElement = document.getElementById('statusConnection');
                    const apiStatusElement = document.getElementById('apiStatus');
                    
                    statusElement.className = 'status-connection disconnected';
                    statusElement.innerHTML = '❌ Erro de conexão com o servidor';
                    apiStatusElement.className = 'api-status offline';
                    apiStatusElement.innerHTML = '📡 API Offline';
                    
                    console.error('Erro de conexão:', error);
                }
            }

            async carregarItens() {
                try {
                    const response = await fetch(`${API_URL}?action=getAll`, {
                        method: 'GET',
                        headers: { 'Content-Type': 'application/json' }
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const data = await response.json();
                    
                    if (data.success) {
                        this.itens = data.data || [];
                        this.renderizarItens();
                        this.atualizarEstatisticas();
                        this.mostrarNotificacao('✅ Itens carregados com sucesso!', 'success');
                    } else {
                        throw new Error(data.message || 'Erro ao carregar itens');
                    }
                } catch (error) {
                    console.error('Erro ao carregar itens:', error);
                    this.mostrarNotificacao('❌ Erro ao carregar itens do servidor', 'error');
                    this.mostrarEstadoVazio('Erro ao conectar com o servidor');
                }
            }

            async salvarItem() {
                const formData = new FormData(document.getElementById('itemForm'));
                const item = {
                    nome: formData.get('nome').trim(),
                    tipo: formData.get('tipo'),
                    quantidade: parseInt(formData.get('quantidade'))
                };

                // Validação local
                if (!this.validarItem(item)) {
                    return;
                }

                try {
                    let url = API_URL;
                    let method = 'POST';
                    let action = 'create';

                    if (this.itemEditando) {
                        item.id = this.itemEditando.id;
                        action = 'update';
                        method = 'PUT';
                    }

                    const response = await fetch(url, {
                        method: method,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            action: action,
                            data: item
                        })
                    });

                    const result = await response.json();

                    if (result.success) {
                        if (this.itemEditando) {
                            this.mostrarNotificacao('✅ Item atualizado com sucesso!', 'success');
                            this.cancelarEdicao();
                        } else {
                            this.mostrarNotificacao('✅ Item cadastrado com sucesso!', 'success');
                        }
                        
                        await this.carregarItens();
                        this.limparFormulario();
                    } else {
                        throw new Error(result.message || 'Erro ao salvar item');
                    }
                } catch (error) {
                    console.error('Erro ao salvar item:', error);
                    this.